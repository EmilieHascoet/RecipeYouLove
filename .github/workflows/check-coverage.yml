name: üìä Check Coverage (JaCoCo)

on:
  workflow_call:
    inputs:
      java-version:
        description: "Version de Java"
        required: true
        type: string

jobs:
  detect-structure:
    name: üîç Detect Project Structure
    runs-on: ubuntu-latest
    outputs:
      is-parent: ${{ steps.detect.outputs.is-parent }}
      microservices: ${{ steps.detect.outputs.microservices }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Detect structure
        id: detect
        run: |
          if [ -d "microservices" ]; then
            echo "is-parent=true" >> $GITHUB_OUTPUT
            MS_LIST=$(ls -d microservices/*/ 2>/dev/null | xargs -n 1 basename | jq -R -s -c 'split("\n")[:-1]')
            echo "microservices=$MS_LIST" >> $GITHUB_OUTPUT
            echo "üîç Structure PARENT d√©tect√©e"
          else
            echo "is-parent=false" >> $GITHUB_OUTPUT
            echo "microservices=[\".\"]" >> $GITHUB_OUTPUT
            echo "üîç Structure MICROSERVICE d√©tect√©e"
          fi

  coverage-parent:
    name: üìä Coverage ${{ matrix.microservice }}
    needs: detect-structure
    if: needs.detect-structure.outputs.is-parent == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        microservice: ${{ fromJson(needs.detect-structure.outputs.microservices) }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Setup Java ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}
          cache: 'maven'

      - name: üíæ Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: üß™ Run Tests with JaCoCo
        working-directory: microservices/${{ matrix.microservice }}
        run: mvn clean test jacoco:report

      - name: üìä Check Coverage Threshold
        working-directory: microservices/${{ matrix.microservice }}
        run: |
          # V√©rifier que le rapport JaCoCo existe
          if [ ! -f target/site/jacoco/index.html ]; then
            echo "‚ùå Rapport JaCoCo non trouv√©!"
            exit 1
          fi
          
          # Extraire le pourcentage de couverture depuis le fichier CSV
          if [ -f target/site/jacoco/jacoco.csv ]; then
            # Calculer la couverture des instructions
            INSTRUCTION_MISSED=$(awk -F',' 'NR>1 {missed+=$4} END {print missed}' target/site/jacoco/jacoco.csv)
            INSTRUCTION_COVERED=$(awk -F',' 'NR>1 {covered+=$5} END {print covered}' target/site/jacoco/jacoco.csv)
            TOTAL_INSTRUCTIONS=$((INSTRUCTION_MISSED + INSTRUCTION_COVERED))
            
            if [ $TOTAL_INSTRUCTIONS -gt 0 ]; then
              COVERAGE=$((INSTRUCTION_COVERED * 100 / TOTAL_INSTRUCTIONS))
              
              echo "üìä Couverture de code: ${COVERAGE}%"
              echo "   - Instructions couvertes: ${INSTRUCTION_COVERED}"
              echo "   - Instructions totales: ${TOTAL_INSTRUCTIONS}"
              
              if [ $COVERAGE -lt 60 ]; then
                echo ""
                echo "‚ùå √âCHEC: La couverture de code (${COVERAGE}%) est inf√©rieure au seuil requis de 60%"
                echo "   Il manque $((60 - COVERAGE))% de couverture pour atteindre l'objectif"
                exit 1
              else
                echo ""
                echo "‚úÖ SUCC√àS: La couverture de code (${COVERAGE}%) d√©passe le seuil requis de 60%"
              fi
            else
              echo "‚ö†Ô∏è Aucune instruction trouv√©e pour calculer la couverture"
              exit 1
            fi
          else
            echo "‚ùå Fichier jacoco.csv non trouv√©!"
            exit 1
          fi

      - name: üì§ Upload JaCoCo Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-${{ matrix.microservice }}
          path: microservices/${{ matrix.microservice }}/target/site/jacoco/
          retention-days: 30

  coverage-microservice:
    name: üìä Coverage Analysis
    needs: detect-structure
    if: needs.detect-structure.outputs.is-parent == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Setup Java ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}
          cache: 'maven'

      - name: üíæ Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: üß™ Run Tests with JaCoCo
        run: mvn clean test jacoco:report

      - name: üìä Check Coverage Threshold
        run: |
          # V√©rifier que le rapport JaCoCo existe
          if [ ! -f target/site/jacoco/index.html ]; then
            echo "‚ùå Rapport JaCoCo non trouv√©!"
            exit 1
          fi
          
          # Extraire le pourcentage de couverture depuis le fichier CSV
          if [ -f target/site/jacoco/jacoco.csv ]; then
            # Calculer la couverture des instructions
            INSTRUCTION_MISSED=$(awk -F',' 'NR>1 {missed+=$4} END {print missed}' target/site/jacoco/jacoco.csv)
            INSTRUCTION_COVERED=$(awk -F',' 'NR>1 {covered+=$5} END {print covered}' target/site/jacoco/jacoco.csv)
            TOTAL_INSTRUCTIONS=$((INSTRUCTION_MISSED + INSTRUCTION_COVERED))
            
            if [ $TOTAL_INSTRUCTIONS -gt 0 ]; then
              COVERAGE=$((INSTRUCTION_COVERED * 100 / TOTAL_INSTRUCTIONS))
              
              echo "üìä Couverture de code: ${COVERAGE}%"
              echo "   - Instructions couvertes: ${INSTRUCTION_COVERED}"
              echo "   - Instructions totales: ${TOTAL_INSTRUCTIONS}"
              
              if [ $COVERAGE -lt 60 ]; then
                echo ""
                echo "‚ùå √âCHEC: La couverture de code (${COVERAGE}%) est inf√©rieure au seuil requis de 60%"
                echo "   Il manque $((60 - COVERAGE))% de couverture pour atteindre l'objectif"
                exit 1
              else
                echo ""
                echo "‚úÖ SUCC√àS: La couverture de code (${COVERAGE}%) d√©passe le seuil requis de 60%"
              fi
            else
              echo "‚ö†Ô∏è Aucune instruction trouv√©e pour calculer la couverture"
              exit 1
            fi
          else
            echo "‚ùå Fichier jacoco.csv non trouv√©!"
            exit 1
          fi

      - name: üì§ Upload JaCoCo Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/
          retention-days: 30
