name: Check Coverage (JaCoCo)

on:
  workflow_call:
    inputs:
      java-version:
        description: "Version de Java"
        required: true
        type: string

jobs:
  jacoco-coverage:
    name:  JaCoCo Coverage - ${{ matrix.microservice }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        microservice:
          - microservice1-mysql
          - microservice2-mysql
          - microservice3-mongodb
    steps:
      - name:  Checkout code
        uses: actions/checkout@v4

      - name:  Setup Java ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}
          cache: 'maven'

      - name:  Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name:  Run Tests with JaCoCo
        working-directory: microservices/${{ matrix.microservice }}
        run: |
          mvn clean test jacoco:report
          echo " Tests avec JaCoCo terminés"

      - name:  Vérifier rapport JaCoCo
        working-directory: microservices/${{ matrix.microservice }}
        run: |
          if [ ! -d target/site/jacoco ]; then
            echo " Rapport JaCoCo non généré!"
            exit 1
          fi
          
          echo " Rapport JaCoCo généré"
          ls -la target/site/jacoco/

      - name:  Extraire les métriques de couverture
        working-directory: microservices/${{ matrix.microservice }}
        run: |
          # Parser le fichier jacoco.csv pour extraire les stats
          if [ -f target/site/jacoco/jacoco.csv ]; then
            echo " Métriques de couverture:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          
            # Extraire les totaux
            INSTRUCTION_MISSED=$(awk -F',' 'NR>1 {missed+=$4; covered+=$5} END {print missed}' target/site/jacoco/jacoco.csv)
            INSTRUCTION_COVERED=$(awk -F',' 'NR>1 {missed+=$4; covered+=$5} END {print covered}' target/site/jacoco/jacoco.csv)
            TOTAL_INSTRUCTIONS=$((INSTRUCTION_MISSED + INSTRUCTION_COVERED))
          
            if [ $TOTAL_INSTRUCTIONS -gt 0 ]; then
              COVERAGE=$((INSTRUCTION_COVERED * 100 / TOTAL_INSTRUCTIONS))
          
              echo "###  Coverage Report - ${{ matrix.microservice }}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Métrique | Valeur |" >> $GITHUB_STEP_SUMMARY
              echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
              echo "| Instructions couvertes | ${INSTRUCTION_COVERED} / ${TOTAL_INSTRUCTIONS} |" >> $GITHUB_STEP_SUMMARY
              echo "| Pourcentage | **${COVERAGE}%** |" >> $GITHUB_STEP_SUMMARY
          
              # Vérifier seuil minimal
              if [ $COVERAGE -lt 70 ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo " **Attention:** La couverture est inférieure à 70%" >> $GITHUB_STEP_SUMMARY
              else
                echo "" >> $GITHUB_STEP_SUMMARY
                echo " Couverture satisfaisante (>= 70%)" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi

      - name:  Upload JaCoCo Report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report-${{ matrix.microservice }}
          path: microservices/${{ matrix.microservice }}/target/site/jacoco/
          retention-days: 30

      - name:  Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: microservices/${{ matrix.microservice }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 70
          min-coverage-changed-files: 80
          title: " Coverage Report - ${{ matrix.microservice }}"

      - name:  Upload Coverage to Codecov (optionnel)
        if: env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: microservices/${{ matrix.microservice }}/target/site/jacoco/jacoco.xml
          flags: ${{ matrix.microservice }}
          name: codecov-${{ matrix.microservice }}