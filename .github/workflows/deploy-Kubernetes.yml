name: 🚀 Deploy to Kubernetes

on:
  workflow_call:
    inputs:
      environment:
        description: "Environnement cible (dev/staging/production)"
        required: true
        type: string
      image-tag:
        description: "Tag de l'image Docker"
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: 🚀 Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔐 Configure Kubernetes credentials
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl cluster-info

      - name: 📋 Déterminer le namespace et app name
        id: config
        run: |
          case "${{ inputs.environment }}" in
            production) NAMESPACE="prod" ;;
            staging) NAMESPACE="staging" ;;
            dev) NAMESPACE="dev" ;;
            *) NAMESPACE="dev" ;;
          esac
          
          # Extraire le nom depuis pom.xml
          APP_NAME=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout 2>/dev/null || echo "application")
          
          echo "namespace=${NAMESPACE}" >> $GITHUB_OUTPUT
          echo "app_name=${APP_NAME}" >> $GITHUB_OUTPUT
          
          echo "🚀 Déploiement de: $APP_NAME"
          echo "📦 Namespace: $NAMESPACE"
          echo "🏷️ Image tag: ${{ inputs.image-tag }}"

      - name: 📦 Vérifier/Créer namespace
        run: |
          NAMESPACE="${{ steps.config.outputs.namespace }}"
          if ! kubectl get namespace $NAMESPACE &> /dev/null; then
            echo "📦 Création du namespace: $NAMESPACE"
            kubectl create namespace $NAMESPACE
          else
            echo "✅ Namespace $NAMESPACE existe déjà"
          fi

      - name: 🔐 Create Image Pull Secret
        run: |
          NAMESPACE="${{ steps.config.outputs.namespace }}"
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: 🚀 Deploy with Helm
        working-directory: helm-charts
        run: |
          NAMESPACE="${{ steps.config.outputs.namespace }}"
          APP_NAME="${{ steps.config.outputs.app_name }}"
          IMAGE_TAG="${{ inputs.image-tag }}"
          
          VALUES_FILE="values-${{ inputs.environment }}.yaml"
          if [ ! -f "$VALUES_FILE" ]; then
            echo "⚠️ Fichier $VALUES_FILE non trouvé, utilisation de values.yaml"
            VALUES_FILE="values.yaml"
          fi
          
          echo "📋 Déploiement avec les valeurs: $VALUES_FILE"
          
          helm upgrade --install $APP_NAME . \
            --namespace $NAMESPACE \
            --create-namespace \
            --values $VALUES_FILE \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=$IMAGE_TAG \
            --set nameOverride=$APP_NAME \
            --set fullnameOverride=$APP_NAME \
            --wait \
            --timeout 5m

      - name: 🔍 Vérifier le déploiement
        run: |
          NAMESPACE="${{ steps.config.outputs.namespace }}"
          APP_NAME="${{ steps.config.outputs.app_name }}"
          
          echo "⏳ Attente que les pods soient prêts..."
          kubectl wait --for=condition=ready pod -l app=$APP_NAME --namespace=$NAMESPACE --timeout=300s
          
          echo "✅ Pods déployés:"
          kubectl get pods -n $NAMESPACE -l app=$APP_NAME
          
          echo ""
          echo "📊 Services:"
          kubectl get svc -n $NAMESPACE -l app=$APP_NAME

      - name: 💾 Save deployment info
        run: |
          NAMESPACE="${{ steps.config.outputs.namespace }}"
          APP_NAME="${{ steps.config.outputs.app_name }}"
          
          # Sauvegarder les infos pour les tests d'intégration
          mkdir -p deployment-info
          
          SERVICE_NAME=$(kubectl get svc -n $NAMESPACE -l app=$APP_NAME -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
          SERVICE_PORT=$(kubectl get svc -n $NAMESPACE -l app=$APP_NAME -o jsonpath='{.items[0].spec.ports[0].port}' 2>/dev/null || echo "8080")
          
          cat > deployment-info/app.json <<EOF
          {
            "application": "$APP_NAME",
            "namespace": "$NAMESPACE",
            "service_name": "$SERVICE_NAME",
            "service_port": "$SERVICE_PORT",
            "image_tag": "${{ inputs.image-tag }}",
            "environment": "${{ inputs.environment }}"
          }
          EOF
          
          echo "📄 Informations de déploiement sauvegardées"

      - name: 📤 Upload deployment info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: deployment-info/app.json
          retention-days: 1

      - name: 📊 Deployment Summary
        run: |
          NAMESPACE="${{ steps.config.outputs.namespace }}"
          APP_NAME="${{ steps.config.outputs.app_name }}"
          
          echo "### 🚀 Déploiement réussi" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Paramètre | Valeur |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Application | \`$APP_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌍 Environnement | **${{ inputs.environment }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| ☸️ Namespace | \`$NAMESPACE\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ Image Tag | \`${{ inputs.image-tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Image | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image-tag }}\` |" >> $GITHUB_STEP_SUMMARY
