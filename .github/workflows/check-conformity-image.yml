name: Check Conformity Image

on:
  workflow_call:
    inputs:
      image-tag:
        description: "Tag de l'image Docker à scanner"
        required: true
        type: string
      microservice-name:
        description: "Nom du microservice"
        required: true
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Préparer le nom de l'image
        id: image
        run: |
          IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_REF="${{ env.REGISTRY }}/${IMAGE_NAME}:${{ inputs.image-tag }}"
          
          echo "image-ref=${IMAGE_REF}" >> $GITHUB_OUTPUT
          echo "Image à scanner: ${IMAGE_REF}"

      - name: Vérifier que l'image existe
        run: |
          IMAGE_REF="${{ steps.image.outputs.image-ref }}"
          echo "Vérification de l'image: $IMAGE_REF"
          
          if docker manifest inspect $IMAGE_REF > /dev/null 2>&1; then
            echo "Image trouvée dans le registry"
          else
            echo "Image non trouvée dans le registry!"
            echo "Vérifiez que le job build-docker-image a réussi."
            exit 1
          fi

      - name: Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ steps.image.outputs.image-ref }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Créer fichier SARIF si manquant
        run: |
          if [ ! -f "trivy-results.sarif" ]; then
            echo "Fichier SARIF non créé par Trivy, création d'un rapport vide valide"
            cat > trivy-results.sarif <<'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "informationUri": "https://github.com/aquasecurity/trivy",
                    "version": "0.0.0",
                    "rules": []
                  }
                },
                "results": []
              }
            ]
          }
          EOF
            echo "Fichier SARIF vide créé"
          else
            echo "Fichier SARIF créé avec succès par Trivy"
            ls -lh trivy-results.sarif
          fi

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy-scan

      - name: Run Trivy for detailed report
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ steps.image.outputs.image-ref }}
          format: 'table'
          output: 'trivy-report.txt'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Parse Trivy results
        id: parse-trivy
        run: |
          REPORT_FILE="trivy-report.txt"
          
          if [ -f "$REPORT_FILE" ]; then
            # Compter les occurrences de manière robuste
            CRITICAL=0
            HIGH=0
            MEDIUM=0
            LOW=0
            
            if grep -q "CRITICAL" "$REPORT_FILE" 2>/dev/null; then
              CRITICAL=$(grep -c "CRITICAL" "$REPORT_FILE")
            fi
            
            if grep -q "HIGH" "$REPORT_FILE" 2>/dev/null; then
              HIGH=$(grep -c "HIGH" "$REPORT_FILE")
            fi
            
            if grep -q "MEDIUM" "$REPORT_FILE" 2>/dev/null; then
              MEDIUM=$(grep -c "MEDIUM" "$REPORT_FILE")
            fi
            
            if grep -q "LOW" "$REPORT_FILE" 2>/dev/null; then
              LOW=$(grep -c "LOW" "$REPORT_FILE")
            fi
          
            echo "critical=$CRITICAL" >> "$GITHUB_OUTPUT"
            echo "high=$HIGH" >> "$GITHUB_OUTPUT"
            echo "medium=$MEDIUM" >> "$GITHUB_OUTPUT"
            echo "low=$LOW" >> "$GITHUB_OUTPUT"
            
            echo "Résultats du scan de sécurité:"
            echo "   CRITICAL: $CRITICAL"
            echo "   HIGH: $HIGH"
            echo "   MEDIUM: $MEDIUM"
            echo "   LOW: $LOW"
          else
            echo "Rapport détaillé non disponible"
            echo "critical=0" >> "$GITHUB_OUTPUT"
            echo "high=0" >> "$GITHUB_OUTPUT"
            echo "medium=0" >> "$GITHUB_OUTPUT"
            echo "low=0" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-security-report
          path: trivy-report.txt
          retention-days: 30

      - name: Security Summary
        if: always()
        run: |
          echo "### Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image scannée:** \`${{ steps.image.outputs.image-ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Sévérité | Nombre |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CRITICAL | ${{ steps.parse-trivy.outputs.critical }} |" >> $GITHUB_STEP_SUMMARY
          echo "| HIGH | ${{ steps.parse-trivy.outputs.high }} |" >> $GITHUB_STEP_SUMMARY
          echo "| MEDIUM | ${{ steps.parse-trivy.outputs.medium }} |" >> $GITHUB_STEP_SUMMARY
          echo "| LOW | ${{ steps.parse-trivy.outputs.low }} |" >> $GITHUB_STEP_SUMMARY
