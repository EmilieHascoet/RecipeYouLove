name: 🔒 Check Conformity Image

on:
  workflow_call:
    inputs:
      image-tag:
        description: "Tag de l'image Docker à scanner"
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: read
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Vérifier que l'image existe
        run: |
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image-tag }}"
          echo "🔍 Vérification de l'image: $IMAGE_REF"
          
          if docker manifest inspect $IMAGE_REF > /dev/null 2>&1; then
            echo "✅ Image trouvée dans le registry"
          else
            echo "❌ Image non trouvée dans le registry!"
            echo "Vérifiez que le job build-docker-image a réussi."
            exit 1
          fi

      - name: 🔍 Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: 🔍 Créer fichier SARIF si manquant
        run: |
          if [ ! -f "trivy-results.sarif" ]; then
            echo "⚠️ Fichier SARIF non créé par Trivy, création d'un rapport vide valide"
            cat > trivy-results.sarif <<'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "informationUri": "https://github.com/aquasecurity/trivy",
                    "version": "0.0.0",
                    "rules": []
                  }
                },
                "results": []
              }
            ]
          }
          EOF
            echo "✅ Fichier SARIF vide créé"
          else
            echo "✅ Fichier SARIF créé avec succès par Trivy"
            ls -lh trivy-results.sarif
          fi

      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy-scan

      - name: 🔍 Run Trivy for detailed report
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image-tag }}
          format: 'table'
          output: 'trivy-report.txt'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: 📊 Parse Trivy results
        id: parse-trivy
        run: |
          REPORT_FILE="trivy-report.txt"
          
          if [ -f "$REPORT_FILE" ]; then
            CRITICAL=$(grep -c "CRITICAL" "$REPORT_FILE" || echo "0")
            HIGH=$(grep -c "HIGH" "$REPORT_FILE" || echo "0")
            MEDIUM=$(grep -c "MEDIUM" "$REPORT_FILE" || echo "0")
            LOW=$(grep -c "LOW" "$REPORT_FILE" || echo "0")
          
            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
            echo "low=$LOW" >> $GITHUB_OUTPUT
            
            echo "📊 Résultats du scan de sécurité:"
            echo "   🔴 CRITICAL: $CRITICAL"
            echo "   🟠 HIGH: $HIGH"
            echo "   🟡 MEDIUM: $MEDIUM"
            echo "   🔵 LOW: $LOW"
          else
            echo "⚠️ Rapport détaillé non disponible"
            echo "critical=0" >> $GITHUB_OUTPUT
            echo "high=0" >> $GITHUB_OUTPUT
            echo "medium=0" >> $GITHUB_OUTPUT
            echo "low=0" >> $GITHUB_OUTPUT
          fi

      - name: 📤 Upload Trivy report
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: trivy-report
          path: trivy-report.txt
          retention-days: 30

      - name: ⚠️ Check security threshold
        run: |
          CRITICAL=${{ steps.parse-trivy.outputs.critical }}
          HIGH=${{ steps.parse-trivy.outputs.high }}
          
          echo "📊 Vérification des seuils de sécurité..."
          echo "   CRITICAL: $CRITICAL (seuil: 0)"
          echo "   HIGH: $HIGH (seuil: 5)"
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "❌ ÉCHEC: $CRITICAL vulnérabilités CRITIQUES détectées"
            echo "::error::Des vulnérabilités critiques ont été détectées. Corrigez-les avant de déployer."
            exit 1
          fi
          
          if [ "$HIGH" -gt 5 ]; then
            echo "⚠️ ATTENTION: $HIGH vulnérabilités HIGH détectées (seuil: 5)"
            echo "::warning::Trop de vulnérabilités HIGH. Recommandation: corriger avant déploiement."
          fi
          
          echo "✅ Scan de sécurité passé avec succès"
          
          # Créer un résumé GitHub
          echo "### 🔒 Scan de sécurité terminé" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Sévérité | Nombre | Statut |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 CRITICAL | $CRITICAL | $([ "$CRITICAL" -eq 0 ] && echo "✅ OK" || echo "❌ ÉCHEC") |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟠 HIGH | $HIGH | $([ "$HIGH" -le 5 ] && echo "✅ OK" || echo "⚠️ WARNING") |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 MEDIUM | ${{ steps.parse-trivy.outputs.medium }} | ℹ️ Info |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔵 LOW | ${{ steps.parse-trivy.outputs.low }} | ℹ️ Info |" >> $GITHUB_STEP_SUMMARY
