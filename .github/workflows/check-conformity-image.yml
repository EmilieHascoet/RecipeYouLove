name: 🔒 Check Conformity Image

on:
  workflow_call:
    inputs:
      image-tag:
        description: "Tag de l'image Docker à scanner"
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-structure:
    name: 🔍 Detect Project Structure
    runs-on: ubuntu-latest
    outputs:
      is-parent: ${{ steps.detect.outputs.is-parent }}
      microservices: ${{ steps.detect.outputs.microservices }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect structure
        id: detect
        run: |
          if [ -d "microservices" ]; then
            echo "is-parent=true" >> $GITHUB_OUTPUT
            MS_LIST=$(ls -d microservices/*/ 2>/dev/null | xargs -n 1 basename | jq -R -s -c 'split("\n")[:-1]')
            echo "microservices=$MS_LIST" >> $GITHUB_OUTPUT
            echo "🔍 Structure PARENT détectée"
          else
            echo "is-parent=false" >> $GITHUB_OUTPUT
            echo "microservices=[\".\"]" >> $GITHUB_OUTPUT
            echo "🔍 Structure MICROSERVICE détectée"
          fi

  scan-parent:
    name: 🔍 Scan ${{ matrix.microservice }}
    needs: detect-structure
    if: needs.detect-structure.outputs.is-parent == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        microservice: ${{ fromJson(needs.detect-structure.outputs.microservices) }}
    permissions:
      contents: read
      security-events: write
      packages: read
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.microservice }}:${{ inputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.microservice }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.microservice }}.sarif'
          category: trivy-${{ matrix.microservice }}

      - name: 🔍 Run Trivy for detailed report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.microservice }}:${{ inputs.image-tag }}
          format: 'table'
          output: 'trivy-report-${{ matrix.microservice }}.txt'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: 📊 Parse Trivy results
        id: parse-trivy
        run: |
          REPORT_FILE="trivy-report-${{ matrix.microservice }}.txt"
          
          if [ -f "$REPORT_FILE" ]; then
            CRITICAL=$(grep -c "CRITICAL" "$REPORT_FILE" || echo "0")
            HIGH=$(grep -c "HIGH" "$REPORT_FILE" || echo "0")
            MEDIUM=$(grep -c "MEDIUM" "$REPORT_FILE" || echo "0")
            LOW=$(grep -c "LOW" "$REPORT_FILE" || echo "0")
          
            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
            echo "low=$LOW" >> $GITHUB_OUTPUT
          fi

      - name: 📤 Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ matrix.microservice }}
          path: trivy-report-${{ matrix.microservice }}.txt
          retention-days: 30

  scan-microservice:
    name: 🔍 Security Scan
    needs: detect-structure
    if: needs.detect-structure.outputs.is-parent == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: read
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy-scan

      - name: 🔍 Run Trivy for detailed report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image-tag }}
          format: 'table'
          output: 'trivy-report.txt'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: 📊 Parse Trivy results
        id: parse-trivy
        run: |
          REPORT_FILE="trivy-report.txt"
          
          if [ -f "$REPORT_FILE" ]; then
            CRITICAL=$(grep -c "CRITICAL" "$REPORT_FILE" || echo "0")
            HIGH=$(grep -c "HIGH" "$REPORT_FILE" || echo "0")
            MEDIUM=$(grep -c "MEDIUM" "$REPORT_FILE" || echo "0")
            LOW=$(grep -c "LOW" "$REPORT_FILE" || echo "0")
          
            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
            echo "low=$LOW" >> $GITHUB_OUTPUT
          fi

      - name: 📤 Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt
          retention-days: 30
