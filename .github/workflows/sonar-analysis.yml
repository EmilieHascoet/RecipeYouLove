name: SonarQube Analysis (Main Only)

on:
  workflow_call:
    inputs:
      java-version:
        description: "Version de Java"
        required: true
        type: string

jobs:
  sonarqube:
    name:  SonarQube - ${{ matrix.microservice }}
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # UNIQUEMENT sur main
    strategy:
      fail-fast: false
      matrix:
        microservice:
          - microservice1-mysql
          - microservice2-mysql
          - microservice3-mongodb
    steps:
      - name:  Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history pour analyse SonarQube

      - name:  Setup Java ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}
          cache: 'maven'

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: sonar-${{ runner.os }}-${{ matrix.microservice }}
          restore-keys: |
            sonar-${{ runner.os }}-

      - name:  Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name:  SonarQube Scan
        working-directory: microservices/${{ matrix.microservice }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo " Lancement de l'analyse SonarQube..."
          
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=${{ matrix.microservice }} \
            -Dsonar.projectName="${{ matrix.microservice }}" \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.source=${{ inputs.java-version }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.qualitygate.wait=true
          
          echo " Analyse SonarQube terminÃ©e"

      - name:  VÃ©rifier Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
        id: quality-gate

      - name:  Afficher rÃ©sultats Quality Gate
        run: |
          echo "###  SonarQube Quality Gate - ${{ matrix.microservice }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.quality-gate.outputs.quality-gate-status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— [Voir les rÃ©sultats sur SonarQube](${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ matrix.microservice }})" >> $GITHUB_STEP_SUMMARY

      - name:  Ã‰chec si Quality Gate failed
        if: steps.quality-gate.outputs.quality-gate-status == 'FAILED'
        run: |
          echo " Quality Gate a Ã©chouÃ©!"
          echo "ðŸ”— Voir les dÃ©tails: ${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ matrix.microservice }}"
          exit 1